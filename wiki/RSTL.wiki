#summary Rexhunter99's Standard Template Library

= Introduction =
Rexhunter99's Standard Template Library, is a custom built STL library specifically made for game engines, meant to be high performance, thus free of bloat and only includes things needed by a game engine.


= Components =
Current available types are:
  * Array< value_type >
  * Vector< value_type >
  * String - _Was templated for character types but is controlled by UNICODE definitions now_
  * [RSTL#Map_<K,V> `Map< key_type, value_type >`]
  * OStream : IOStream
  * FStream : IOStream
  * Exception - _Evolving, current has provisions for various necessities_

== Array`<T>` ==
Constructors
  * Array( size_t p_size );
  * Array( const Array`<T>&` p_array );
  * Array( const T`*` p_array, size_t p_size );
Methods:
  * T`*` data();
  * size_t size();
Proposed:
  * Array( const Vector`<T>&` p_vector );
  * size_t find( T p_find );

== Vector`<T>` ==
Constructors:
  * Vector();
  * Vector( size_t p_size );
  * Vector( const Vector`<T>&` p_vector );
  * Vector( const Array`<T>&` p_array );
  * Vector( const T`*` p_array, size_t p_size );
Methods:
  * void clear();
  * T`&` at( size_t p_index );
  * size_t size();
  * T`*` data();
  * T`&` push_back( const T`&` p_element );
  * void pop_back( );
  * T`&` insert( const T`&` p_element, size_t p_index );
  * void erase( size_t p_index );
Proposed:
  * void erase( size_t p_start, size_t p_end );

== Map`<K,V>` ==
Constructors:
  * Map();
  * Map( const Map`<K,V>`& p_map );
Methods:
  * append( K p_key, V p_value );
  * remove( K p_key );
  * clear( );
  * V& find( K p_key );